#include <stdio.h> 
#include <stdlib.h> 
#define MAX_SIZE 100 // Define the maximum size of the queue 
typedef struct { 
 int arr[MAX_SIZE]; 
int front; 
 int rear; 
} CircularQueue; 
// Initialize the circular queue void 
initialize(CircularQueue *q) { 
 q->front = -1; q-
>rear = -1; 
} 
// Check if the queue is empty 
int isEmpty(CircularQueue *q) 
{ 
return q->front == -1; 
} 
// Check if the queue is full int 
isFull(CircularQueue *q)
{
return (q->rear + 1) % MAX_SIZE == q->front; 

} 

// Enqueue an item to the queue void 

enqueue(CircularQueue *q, int item) 

{ 

 if (isFull(q)) 

{ 

 printf("Queue is full!\n"); 

 return; 

 } 

 if (isEmpty(q)) 

{ 

q->front = 0; 

 q->rear = 0; 

 }

else 

{ 

 q->rear = (q->rear + 1) % MAX_SIZE; 

 } 

 q->arr[q->rear] = item; 

 printf("%d enqueued to the queue.\n", item); 

} 

// Dequeue an item from the 

queue int dequeue(CircularQueue 

*q) { if (isEmpty(q)) { 

printf("Queue is empty!\n"); 

 return -1; 

 } 

 int dequeuedItem = q->arr[q->front]; 

 if (q->front == q->rear) 

{ 

// Queue has only one element, reset queue after dequeue 

 q->front = -1; 

 q->rear = -1; 

 }

else 

{ 

 q->front = (q->front + 1) % MAX_SIZE; 

 } 

 return dequeuedItem; 

} 

// Display all elements in the queue 

void display(CircularQueue *q)

{ 
 if (isEmpty(q)) 
{ 
 printf("Queue is empty!\n"); 
 return; 
 } 
 printf("Queue elements: "); 
int i = q->front; 
while (i != q->rear) 
{ 
printf("%d ", q->arr[i]); 
 i = (i + 1) % MAX_SIZE; 
 } 
 printf("%d\n", q->arr[q->rear]); // Print the last element 
} 
int main() { 
CircularQueue q; 
 initialize(&q); 
 int choice, item; 
 while (1) { 
printf("\nQueue Menu:\n"); 
printf("1. Enqueue\n"); 
printf("2. Dequeue\n"); 
printf("3. Display\n"); 
printf("4. Exit\n"); 
printf("Enter your choice: "); 
scanf("%d", &choice); 
 switch (choice) { 
case 1: 
 printf("Enter the element to enqueue: 
"); 
 scanf("%d", &item); 
 enqueue(&q, item); 
 break; 
case 2: 
 item = dequeue(&q); 
 if (item != -1) 
 printf("Dequeued element: %d\n", item); 
break; 
 case 3: 
 display(&q);
break; 
 case 4: 
 exit(0); 
 default: 
 printf("Invalid choice, please try again.\n"); 
 } 
 } 
 return 0; 
}
 

